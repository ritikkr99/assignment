## Python OOP Assignment
Q1. What is the purpose of Python's OOP?
ans- 
In Python, object-oriented Programming (OOPs) is a programming paradigm that uses objects and classes in programming. It aims to implement real-world entities like inheritance, polymorphisms, encapsulation, etc. in the programming. The main concept of OOPs is to bind the data and the functions that work on that together as a single unit so that no other part of the code can access this data.

Q2. Where does an inheritance search look for an attribute?
ans-
The whole point of a namespace tool like the class statement is to support name inheritance. In Python, inheritance happens when an object is qualified, and involves searching an attribute definition tree (one or more namespaces). Every time you use an expression of the form object.


Q3. How do you distinguish between a class object and an instance object?
ans-
A class is a template for creating objects in a program, whereas the object is an instance of a class. A class is a logical entity, while an object is a physical entity. A class does not allocate memory space; on the other hand, an object allocates memory space


Q4. What makes the first argument in a class’s method function special?
ans- 
A class is a template for creating objects in a program, whereas the object is an instance of a class.
A class is a logical entity, while an object is a physical entity.
A class does not allocate memory space; on the other hand, an object allocates memory space.
You can declare a class only once, but you can create more than one object using a class.
Classes can’t be manipulated, while objects can be manipulated.
Classes don’t have any values, whereas objects have their own


Q5. What is the purpose of the __init__ method?
ans-
The __init__ method lets the class initialize the object's attributes and serves no other purpose. It is only used within classes

Q6. What is the process for creating a class instance?
ans-
To create instances of a class, you call the class using class name and pass in whatever arguments its __init__ method accepts


Q7. What is the process for creating a class?
ans-
In Python, a class can be created by using the keyword class, followed by the class name. The syntax to create a class is given below.

Syntax

class ClassName:    
    #statement_suite     

Q8. How would you define the superclasses of a class?

Q9. What is the relationship between classes and modules?

Q10. How do you make instances and classes?

Q11. Where and how should be class attributes created?

Q12. Where and how are instance attributes created?

Q13. What does the term &quot;self&quot; in a Python class mean?

Q14. How does a Python class handle operator overloading?

Q15. When do you consider allowing operator overloading of your classes?

Q16. What is the most popular form of operator overloading?

Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?

Q18. Describe three applications for exception processing.

Q19. What happens if you don&#39;t do something extra to treat an exception?

Q20. What are your options for recovering from an exception in your script?

Q21. Describe two methods for triggering exceptions in your script.

Q22. Identify two methods for specifying actions to be executed at termination time, regardless of
whether or not an exception exists.

Q23. What is the purpose of the try statement?

Q24. What are the two most popular try statement variations?

Q25. What is the purpose of the raise statement?

Q26. What does the assert statement do, and what other statement is it like?

Q27. What is the purpose of the with/as argument, and what other statement is it like?

Q28. What are *args, **kwargs?

Q29. How can I pass optional or keyword parameters from one function to another?

Q30. What are Lambda Functions?

Q31. Explain Inheritance in Python with an example?

Q32. Suppose class C inherits from classes A and B as class C(A,B).Classes A and B both have their own versions of method func(). If we call func() from an object of class C, which version gets invoked?

Q33. Which methods/functions do we use to determine the type of instance and inheritance?

Q34.Explain the use of the 'nonlocal' keyword in Python.

Q35. What is the global keyword?
