## Assignment Part-1
Q1. Why do we call Python as a general purpose and high-level programming language?
ans- Python is a popular general-purpose programming language that has a wide variety of applications.
 All sorts of technological solutions have Python at their core, from web applications, search engines, 
and games to animation software and even other programming languages.

Python is an object-oriented, high-level programming language.
 Object-oriented means this language is based around objects (such as data) rather than functions, and high-level means it's easy for humans to understand.

Q2. Why is Python called a dynamically typed language?
ans- Python is a dynamically typed language. It doesn’t know about the type of the variable until the code is run. So declaration is of no use.
 What it does is, It stores that value at some memory location and then binds that variable name to that memory container.
 And makes the contents of the container accessible through that variable name. So the data type does not matter.
 As it will get to know the type of the value at run-time.

Q3. List some pros and cons of Python programming language?
ans- pros of Python
	1.Python is easy to learn and read
	2.Python enhances productivity
	3.Python has a vast collection of libraries
	4.Python is free, open-source, and has a vibrant community
	5.Python is a portable programming language
     
    Cons of python
	1.Python has speed limitations
	2.Python is not so strong with mobile computing
	3.Python can have runtime errors
	4.Python consumes a lot of memory space
	5.Python is not easy to test


Q4. In what all domains can we use Python?
ans- We use python for the following domains:
	1.Data Science
	2.Automation
	3.Application Development
	4.AI&ML
	5.Audio & Video application
	6.Console Application
	7.Desktop GUI

Q5. What are variable and how can we declare them?
ans- Variable is containers which store values.

A variable name must start with a letter or the underscore character.
A variable name cannot start with a number.
A variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ).
Variable names are case-sensitive (name, Name and NAME are three different variables).
The reserved words(keywords) cannot be used naming the variable. 

Q6. How can we take an input from the user in Python?
ans- There are two methods:
	input ( prompt )
raw_input ( prompt )

Q7. What is the default datatype of the value that has been taken as an input using input() function?
ans- By default in python , input returns a string.

Q8. What is type casting?
ans- Type Casting is the method to convert the variable data type into a certain data type in order to the operation required to be performed by users.
 In this article, we will see the various technique for typecasting.

There can be two types of Type Casting in Python –

Implicit Type Casting
Explicit Type Casting



Q9. Can we take more than one input from the user using single input() function? If yes, how? If no, why?
ans-The developer often wants a user to enter multiple values or inputs in one line. 
In C++/C user can take multiple inputs in one line using scanf but in Python user can take multiple values or inputs in one line by two methods. 

Using split() method
Using List comprehension


Q10. What are keywords?
Keywords are some predefined and reserved words in python that have special meanings. Keywords are used to define the syntax of the coding. 
example- and or for while

Q11. Can we use keywords as a variable? Support your answer with reason.
ans- We cannot use a keyword as a variable name, function name, or any other identifier. They are used to define the syntax and structure of the Python language.

Q12. What is indentation? What's the use of indentaion in Python?
ans- 	Indentation refers to the spaces at the beginning of a code line. 
Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important. 
Python uses indentation to indicate a block of code.

Q13. How can we throw some output in Python?
ans- In Python, we can simply use the print() function to print output. For example,

print('Python is powerful')



Q14. What are operators in Python?
ans- Types of Python Operators
Here's a list of different types of Python operators that we will learn in this tutorial.

Arithmetic operators
Assignment Operators
Comparison Operators
Logical Operators
Bitwise Operators
Special Operators


Q15. What is difference between / and // operators?
ans- These are the short hand operators for a=a/k and a=a//k respectively. 
The difference between these two is that a/k returns the floating point value of a/k (For eg. 7/2 returns 3.5) whereas,
 if you say 7//2, then, it returns only the quotient i.e. 7//2 returns 3.

Q16. Write a code that gives following as an output.
```
iNeuroniNeuroniNeuroniNeuron
```
ans- for i in range(4):
  print('iNeuron',end='')	

Q17. Write a code to take a number as an input from the user and check if the number is odd or even.
ans-
x= int(input())

if (x%2)==0:
    print("even number")
else:
    print("Odd number")


Q18. What are boolean operator?

ans- The Python Boolean Type
The Python Boolean type has only two possible values:

True
False

Q19. What will the output of the following?
```
1 or 0

0 and 0

True and False and True

1 or 0 or 0
```
ans- 1. 1
	2. 0
	3. False
	4. 1

Q20. What are conditional statements in Python?
ans- Conditional Statement in Python perform different computations or actions depending on whether a specific Boolean constraint evaluates to true or false. 
Conditional statements are handled by IF statements in Python.

Q21. What is use of 'if', 'elif' and 'else' keywords?
ans- It allows us to check for multiple expressions. If the condition for if is False , it checks the condition of the next elif block and so on. 
If all the conditions are False , the body of else is executed.

Q22. Write a code to take the age of person as an input and if age >= 18 display "I can vote". If age is < 18 display "I can't vote".
ans-
person = int(input())

if person>=18:
  print("I can vote")
else:
  print("I can't vote")


Q23. Write a code that displays the sum of all the even numbers from the given list.
```
numbers = [12, 75, 150, 180, 145, 525, 50]
```
ans-

def sum(n):
  add=0
  for i in n[:]:
    if i%2==0:
      add=add+i
  return add 

numbers = [12, 75, 150, 180, 145, 525, 50]
sum(numbers)



Q24. Write a code to take 3 numbers as an input from the user and display the greatest no as output.
ans- 
a,b,c = map(int,input().split())
print(max(a,b,c))


Q25. Write a program to display only those numbers from a list that satisfy the following conditions

- The number must be divisible by five

- If the number is greater than 150, then skip it and move to the next number

- If the number is greater than 500, then stop the loop
```
numbers = [12, 75, 150, 180, 145, 525, 50]

```
ans-



Q26. What is a string? How can we declare string in Python?

Q27. How can we access the string using its index?

Q28. Write a code to get the desired output of the following
```
string = "Big Data iNeuron"
desired_output = "iNeuron"
```

Q29. Write a code to get the desired output of the following
```
string = "Big Data iNeuron"
desired_output = "norueNi"
```

Q30. Resverse the string given in the above question.

Q31. How can you delete entire string at once?

Q32. What is escape sequence?

Q33. How can you print the below string?
```
'iNeuron's Big Data Course'
```

Q34. What is a list in Python?

Q35. How can you create a list in Python?

Q36. How can we access the elements in a list?

Q37. Write a code to access the word "iNeuron" from the given list.
```
lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
``` 

Q38. Take a list as an input from the user and find the length of the list.

Q39. Add the word "Big" in the 3rd index of the given list.
```
lst = ["Welcome", "to", "Data", "course"]
```

Q40. What is a tuple? How is it different from list?

Q41. How can you create a tuple in Python?

Q42. Create a tuple and try to add your name in the tuple. Are you able to do it? Support your answer with reason.

Q43. Can two tuple be appended. If yes, write a code for it. If not, why?

Q44. Take a tuple as an input and print the count of elements in it.

Q45. What are sets in Python?

Q46. How can you create a set?

Q47. Create a set and add "iNeuron" in your set.

Q48. Try to add multiple values using add() function.

Q49. How is update() different from add()?

Q50. What is clear() in sets?

Q51. What is frozen set?

Q52. How is frozen set different from set?

Q53. What is union() in sets? Explain via code.

Q54. What is intersection() in sets? Explain via code.

Q55. What is dictionary ibn Python?

Q56. How is dictionary different from all other data structures.

Q57. How can we delare a dictionary in Python?

Q58. What will the output of the following?
```
var = {}
print(type(var))
```

Q59. How can we add an element in a dictionary?

Q60. Create a dictionary and access all the values in that dictionary.

Q61. Create a nested dictionary and access all the element in the inner dictionary.

Q62. What is the use of get() function?

Q63. What is the use of items() function?

Q64. What is the use of pop() function?

Q65. What is the use of popitems() function?

Q66. What is the use of keys() function?

Q67. What is the use of values() function?

Q68. What are loops in Python?

Q69. How many type of loop are there in Python?

Q70. What is the difference between for and while loops?

Q71. What is the use of continue statement?

Q72. What is the use of break statement?

Q73. What is the use of pass statement?

Q74. What is the use of range() function?

Q75. How can you loop over a dictionary?


### Coding problems
Q76. Write a Python program to find the factorial of a given number.

Q77. Write a Python program to calculate the simple interest. Formula to calculate simple interest is SI = (P*R*T)/100

Q78. Write a Python program to calculate the compound interest. Formula of compound interest is A = P(1+ R/100)^t.

Q79. Write a Python program to check if a number is prime or not.

Q80. Write a Python program to check Armstrong Number.

Q81. Write a Python program to find the n-th Fibonacci Number.

Q82. Write a Python program to interchange the first and last element in a list.

Q83. Write a Python program to swap two elements in a list.

Q84. Write a Python program to find N largest element from a list.

Q85. Write a Python program to find cumulative sum of a list.

Q86. Write a Python program to check if a string is palindrome or not.

Q87. Write a Python program to remove i'th element from a string.

Q88. Write a Python program to check if a substring is present in a given string.

Q89. Write a Python program to find words which are greater than given length k.

Q90. Write a Python program to extract unquire dictionary values.

Q91. Write a Python program to merge two dictionary.

Q92. Write a Python program to convert a list of tuples into dictionary.
```
Input : [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
Output : {'Sachin': 10, 'MSD': 7, 'Kohli': 18, 'Rohit': 45}
```

Q93. Write a Python program to create a list of tuples from given list having number and its cube in each tuple.
```
Input: list = [9, 5, 6]
Output: [(9, 729), (5, 125), (6, 216)]
```

Q94. Write a Python program to get all combinations of 2 tuples.
```
Input : test_tuple1 = (7, 2), test_tuple2 = (7, 8)
Output : [(7, 7), (7, 8), (2, 7), (2, 8), (7, 7), (7, 2), (8, 7), (8, 2)]
```

Q95. Write a Python program to sort a list of tuples by second item.
```
Input : [('for', 24), ('Geeks', 8), ('Geeks', 30)] 
Output : [('Geeks', 8), ('for', 24), ('Geeks', 30)]
```
ans-

Q96. Write a python program to print below pattern.
```
* 
* * 
* * * 
* * * * 
* * * * * 
```
ans-

def pattern1(n):
  for i in range(n):
    for j in range(0,i+1):
      print('*',end=' ')
    print()

pattern1(5)

Q97. Write a python program to print below pattern.
```
    *
   **
  ***
 ****
*****
```
ans-
def pattern2(n):
  n=5;i=0
  while(i<=n):
    print(" " * (n - i) +"*" * i)
    i+=1

pattern2(5)

Q98. Write a python program to print below pattern.
```
    * 
   * * 
  * * * 
 * * * * 
* * * * * 
```
ans-
# Python 3.x code to demonstrate star pattern

# Function to demonstrate printing pattern triangle
def triangle(n):
	
	# number of spaces
	k = n - 1

	# outer loop to handle number of rows
	for i in range(0, n):
	
		# inner loop to handle number spaces
		# values changing acc. to requirement
		for j in range(0, k):
			print(end=" ")
	
		# decrementing k after each loop
		k = k - 1
	
		# inner loop to handle number of columns
		# values changing acc. to outer loop
		for j in range(0, i+1):
		
			# printing stars
			print("* ", end="")
	
		# ending line after each row
		print("\r")

# Driver Code
n = 5
triangle(n)


Q99. Write a python program to print below pattern.
```
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5
```
ans-
# Python 3.x code to demonstrate star pattern

# Function to demonstrate printing pattern of numbers
def numpat(n):
	
	# initialising starting number
	num = 1

	# outer loop to handle number of rows
	for i in range(0, n):
	
		# re assigning num
		num = 1
	
		# inner loop to handle number of columns
			# values changing acc. to outer loop
		for j in range(0, i+1):
		
				# printing number
			print(num, end=" ")
		
			# incrementing number at each column
			num = num + 1
	
		# ending line after each row
		print("\r")

# Driver code
n = 5
numpat(n)

Q100. Write a python program to print below pattern.
```
A 
B B 
C C C 
D D D D 
E E E E E 
```
ans-
# Python 3.x code to demonstrate star pattern

# Function to demonstrate printing pattern of alphabets
def alphapat(n):
	
	# initializing value corresponding to 'A'
	# ASCII value
	num = 65

	# outer loop to handle number of rows
	# 5 in this case
	for i in range(0, n):
	
		# inner loop to handle number of columns
		# values changing acc. to outer loop
		for j in range(0, i+1):
		
			# explicitly converting to char
			ch = chr(num)
		
			# printing char value
			print(ch, end=" ")
	
		# incrementing number
		num = num + 1
	
		# ending line after each row
		print("\r")

# Driver Code
n = 5
alphapat(n)
