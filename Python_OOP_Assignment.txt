## Python OOP Assignment
Q1. What is the purpose of Python's OOP?
ans- 
In Python, object-oriented Programming (OOPs) is a programming paradigm that uses objects and classes in programming. It aims to implement real-world entities like inheritance, polymorphisms, encapsulation, etc. in the programming. The main concept of OOPs is to bind the data and the functions that work on that together as a single unit so that no other part of the code can access this data.

Q2. Where does an inheritance search look for an attribute?
ans-
The whole point of a namespace tool like the class statement is to support name inheritance. In Python, inheritance happens when an object is qualified, and involves searching an attribute definition tree (one or more namespaces). Every time you use an expression of the form object.


Q3. How do you distinguish between a class object and an instance object?
ans-
A class is a template for creating objects in a program, whereas the object is an instance of a class. A class is a logical entity, while an object is a physical entity. A class does not allocate memory space; on the other hand, an object allocates memory space


Q4. What makes the first argument in a class’s method function special?
ans- 
A class is a template for creating objects in a program, whereas the object is an instance of a class.
A class is a logical entity, while an object is a physical entity.
A class does not allocate memory space; on the other hand, an object allocates memory space.
You can declare a class only once, but you can create more than one object using a class.
Classes can’t be manipulated, while objects can be manipulated.
Classes don’t have any values, whereas objects have their own


Q5. What is the purpose of the __init__ method?
ans-
The __init__ method lets the class initialize the object's attributes and serves no other purpose. It is only used within classes

Q6. What is the process for creating a class instance?
ans-
To create instances of a class, you call the class using class name and pass in whatever arguments its __init__ method accepts


Q7. What is the process for creating a class?
ans-
In Python, a class can be created by using the keyword class, followed by the class name. The syntax to create a class is given below.

Syntax

class ClassName:    
    #statement_suite     

Q8. How would you define the superclasses of a class?
ans- The class from which a class inherits is called the parent or superclass. A class which inherits from a superclass is called a subclass, also called heir class or child class. Superclasses are sometimes called ancestors as well.


Q9. What is the relationship between classes and modules?
ans- 
There are huge differences between classes and modules in Python.

Classes are blueprints that allow you to create instances with attributes and bound functionality. Classes support inheritance, metaclasses, and descriptors.

Modules can't do any of this, modules are essentially singleton instances of an internal module class, and all their globals are attributes on the module instance. You can manipulate those attributes as needed (add, remove and update), but take into account that these still form the global namespace for all code defined in that module.
Q10. How do you make instances and classes?
ans-
example how to make instances and classes
class Employee:
   'Common base class for all employees'
   empCount = 0

   def __init__(self, name, salary):
      self.name = name
      self.salary = salary
      Employee.empCount += 1
   
   def displayCount(self):
     print "Total Employee %d" % Employee.empCount

   def displayEmployee(self):
      print "Name : ", self.name,  ", Salary: ", self.salary

"This would create first object of Employee class"
emp1 = Employee("Zara", 2000)
"This would create second object of Employee class"
emp2 = Employee("Manni", 5000)
emp1.displayEmployee()
emp2.displayEmployee()
print "Total Employee %d" % Employee.empCount

Q11. Where and how should be class attributes created?
ans-
Class attributes are attributes which are owned by the class itself. They will be shared by all the instances of the class. Therefore they have the same value for every instance. We define class attributes outside all the methods, usually they are placed at the top, right below the class header.

Q12. Where and how are instance attributes created?
ans-
Unlike class attributes, instance attributes are not shared by objects. Every object has its own copy of the instance attribute (In case of class attributes all object refer to single copy).

To list the attributes of an instance/object, we have two functions:-
1. vars()– This function displays the attribute of an instance in the form of an dictionary.
2. dir()– This function displays more attributes than vars function,as it is not limited to instance. It displays the class attributes as well. It also displays the attributes of its ancestor classes.

Q13. What does the term "self" in a Python class mean?
ans- 
The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.



Q14. How does a Python class handle operator overloading?
ans-
Operator Overloading means giving extended meaning beyond their predefined operational meaning. For example operator + is used to add two integers as well as join two strings and merge two lists. It is achievable because ‘+’ operator is overloaded by int class and str class. You might have noticed that the same built-in operator or function shows different behavior for objects of different classes, this is called Operator Overloading.

Q15. When do you consider allowing operator overloading of your classes?
ans-
Consider that we have two objects which are a physical representation of a class (user-defined data type) and we have to add two objects with binary ‘+’ operator it throws an error, because compiler don’t know how to add two objects. So we define a method for an operator and that process is called operator overloading. We can overload all existing operators but we can’t create a new operator. To perform operator overloading, Python provides some special function or magic function that is automatically invoked when it is associated with that particular operator. For example, when we use + operator, the magic method __add__ is automatically invoked in which the operation for + operator is defined.


Q16. What is the most popular form of operator overloading?
ans- 
A very popular and convenient example is the Addition (+) operator. Just think how the '+' operator operates on two numbers and the same operator operates on two strings. It performs “Addition” on numbers whereas it performs “Concatenation” on strings.


Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?
ans-
Both inheritance and polymorphism are fundamental concepts of object oriented programming. These concepts help us to create code that can be extended and easily maintainable.

Q18. Describe three applications for exception processing.
ans- 



Q19. What happens if you don&#39;t do something extra to treat an exception?

Q20. What are your options for recovering from an exception in your script?

Q21. Describe two methods for triggering exceptions in your script.

Q22. Identify two methods for specifying actions to be executed at termination time, regardless of
whether or not an exception exists.

Q23. What is the purpose of the try statement?

Q24. What are the two most popular try statement variations?

Q25. What is the purpose of the raise statement?

Q26. What does the assert statement do, and what other statement is it like?

Q27. What is the purpose of the with/as argument, and what other statement is it like?

Q28. What are *args, **kwargs?

Q29. How can I pass optional or keyword parameters from one function to another?

Q30. What are Lambda Functions?

Q31. Explain Inheritance in Python with an example?

Q32. Suppose class C inherits from classes A and B as class C(A,B).Classes A and B both have their own versions of method func(). If we call func() from an object of class C, which version gets invoked?

Q33. Which methods/functions do we use to determine the type of instance and inheritance?
ans-


Q34.Explain the use of the 'nonlocal' keyword in Python
ans-
 used to work with variables inside nested functions, where the variable should not belong to the inner function

Q35. What is the global keyword?
ans-
allows you to modify the variable outside of the current scope
